import random
from code.questions.base_question import BaseQuestion
from numpy.random import randint
from numpy.random import uniform
import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn.metrics import roc_auc_score
from sklearn.metrics import precision_recall_curve
from sklearn.linear_model import LinearRegression
from sklearn.neural_network import MLPClassifier
from keras.models import Sequential
from keras.layers import MaxPooling2D
from sklearn.tree import DecisionTreeRegressor

@BaseQuestion.register_task
class Task1(BaseQuestion):

    def __init__(self):
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞.
        dataset - –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–¥–∞–Ω–∏—è
        neighbor_number - –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä —á–∏—Å–ª–æ —Å–æ—Å–µ–¥–µ–π –¥–ª—è –º–æ–¥–µ–ª–∏ k-–±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
        answer - –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        columns = ['x1', 'x2', 'x3']
        X_train = pd.DataFrame(data=randint(1, 10, (6, 3)), columns=columns)
        y_train = pd.Series(randint(0, 2, 6))
        X_test = pd.DataFrame(data=randint(1, 10, (1, 3)), columns=columns)
        dataset = X_train
        dataset = dataset.append(X_test, ignore_index=True)
        dataset['y'] = y_train
        dataset = dataset.fillna('')
        self.dataset = dataset
        self.neighbor_number = random.choice([3, 5])
        clf = KNeighborsClassifier(n_neighbors=self.neighbor_number)
        clf.fit(X_train, y_train)
        self.answer = clf.predict(X_test)[0]

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ü—Ä–æ–≤–µ—Å—Ç–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤ \
–º–µ—Ç–æ–¥–æ–º {self.neighbor_number} –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å—á–∏—Ç–∞—Ç—å –ø–æ –ï–≤–∫–ª–∏–¥–æ–≤–æ–π –º–µ—Ç—Ä–∏–∫–µ. \n {self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        """
        –ú–µ—Ç–æ–¥ –≤–æ–∑—Ä–∞—â–∞–µ—Ç –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.
        :return: str
        """
        return str(self.answer)

@BaseQuestion.register_task
class Task2(BaseQuestion):

    def __init__(self):
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞.
        dataset - –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–¥–∞–Ω–∏—è
        neighbor_number - –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä —á–∏—Å–ª–æ —Å–æ—Å–µ–¥–µ–π –¥–ª—è –º–æ–¥–µ–ª–∏ k-–±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
        answer - –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        columns = ['x1', 'x2', 'x3']
        X_train = pd.DataFrame(data=randint(1, 10, (6, 3)), columns=columns)
        y_train = pd.Series(randint(0, 2, 6))
        X_test = pd.DataFrame(data=randint(1, 10, (1, 3)), columns=columns)
        dataset = X_train
        dataset = dataset.append(X_test, ignore_index=True)
        dataset['y'] = y_train
        dataset = dataset.fillna('')
        self.dataset = dataset

        self.neighbor_number = random.choice([3, 5])
        clf = KNeighborsClassifier(n_neighbors=self.neighbor_number, weights='distance')
        clf.fit(X_train, y_train)
        self.answer = clf.predict(X_test)[0]

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ü—Ä–æ–≤–µ—Å—Ç–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤ \n\
–º–µ—Ç–æ–¥–æ–º {self.neighbor_number} –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –≤–µ—Å–æ–≤ ùë§(ùë•1, ùë•2) = 1 / ùëñ, –≥–¥–µ i ‚Äì –Ω–æ–º–µ—Ä —Å–æ—Å–µ–¥–∞ \n\
–ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É. –í –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≤–∫–ª–∏–¥–æ–≤—É –º–µ—Ç—Ä–∏–∫—É. \n {self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return str(self.answer)

@BaseQuestion.register_task
class Task3(BaseQuestion):

    def __init__(self):
        columns = ['x1', 'x2', 'x3']
        X_train = pd.DataFrame(data=randint(1, 10, (6, 3)), columns=columns)
        y_train = pd.Series(randint(10, 20, 6))
        X_test = pd.DataFrame(data=randint(1, 10, (1, 3)), columns=columns)
        dataset = X_train
        dataset = dataset.append(X_test, ignore_index=True)
        dataset['y'] = y_train
        dataset = dataset.fillna('')
        self.dataset = dataset

        self.neighbor_number = random.choice([2, 3, 4, 5])
        reg = KNeighborsRegressor(n_neighbors=self.neighbor_number, metric='minkowski', p=1)
        reg.fit(X_train, y_train)

        self.answer = reg.predict(X_test)

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏—é –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ –æ–±—ä–µ–∫—Ç–æ–≤ \
–º–µ—Ç–æ–¥–æ–º {self.neighbor_number} –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π –ø–æ –º–µ—Ç—Ä–∏–∫–µ –ú–∏–Ω–∫–æ–≤—Å–∫–æ–≥–æ 1-–π —Å—Ç–µ–ø–µ–Ω–∏. \n {self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return str(self.answer[0])

@BaseQuestion.register_task
class Task4(BaseQuestion):

    def __init__(self):
        columns = ['x1', 'x2', 'x3']
        X_train = pd.DataFrame(data=randint(1, 10, (10, 3)), columns=columns)
        y_train = pd.Series(randint(0, 2, 10))
        X_test = pd.DataFrame(data=randint(1, 10, (2, 3)), columns=columns)
        y_test = pd.Series(randint(0, 2, 2))

        train_dataset = X_train
        train_dataset['y'] = y_train
        self.train_dataset = train_dataset

        test_dataset = X_test
        test_dataset['y'] = y_test
        self.test_dataset = test_dataset

        clf = KNeighborsClassifier()
        parameters = {'n_neighbors': list(range(1, 6))}
        best_clf = GridSearchCV(clf, parameters, cv=4)
        best_clf.fit(X_train, y_train)
        self.answer = best_clf.best_params_['n_neighbors']


    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä kNN-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ –¥–æ–ª–µ –≤–µ—Ä–Ω—ã—Ö \
–æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã –æ–±—É—á–∞—é—â–∞—è –∏ —Ç–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∏. \n –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: \n {self.train_dataset.to_string()} \n \
–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: \n {self.test_dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return str(self.answer)

@BaseQuestion.register_task
class Task5(BaseQuestion):

    def __init__(self):
        predictions = pd.Series(randint(0, 2, 16))
        true_classes = pd.Series(randint(0, 2, 16))
        self.dataset = pd.DataFrame([predictions, true_classes],
                                    index=['–ü—Ä–æ–≥–Ω–æ–∑ a(x)', '–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å y'],
                                    columns=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
        self.dataset = self.dataset.rename(columns={0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: '', 7: '',
                                                    8: '', 9: '', 10: '', 11: '', 12: '', 13: '', 14: '', 15: ''})

        precision = precision_score(true_classes, predictions)
        recall = recall_score(true_classes, predictions)
        accuracy = accuracy_score(true_classes, predictions)
        f_score = f1_score(true_classes, predictions)

        self.answer = list(np.round(np.array([precision, recall, accuracy, f_score]), 2))
        self.answer = list(map(str, self.answer))

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ü–æ—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ precision, recall, accuracy, f-score –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ \n\
–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∞—Å—Å–∞ 1. –û—Ç–≤–µ—Ç –∑–∞–ø–∏—à–∏—Ç–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. \n\
{self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return self.answer[0], self.answer[1], self.answer[2], self.answer[3],

@BaseQuestion.register_task
class Task6(BaseQuestion):

    def __init__(self):
        predictions = pd.Series(uniform(0, 1, 7)).round(2)
        true_classes = pd.Series(randint(0, 2, 7))
        self.dataset = pd.DataFrame([predictions, true_classes],
                                    index=['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ –∫ –∫–ª–∞—Å—Å—É 1, p',
                                                                        '–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å, y'],
                                    columns=[0, 1, 2, 3, 4, 5, 6])
        self.dataset = self.dataset.rename(columns={0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: ''})

        roc_auc = roc_auc_score(true_classes, predictions)

        # –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞—Ç–µ—Ç, –Ω–æ —Ç–æ—á–Ω–æ –≤—ã–¥–∞—ë—Ç –ø–ª–æ—â–∞–¥—å –ø–æ–¥ ROC-–∫—Ä–∏–≤–æ–π
        self.answer = '%0.2f' % roc_auc

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å –ø–æ–¥ ROC-–∫—Ä–∏–≤–æ–π, —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ —Å–æ—Ç—ã—Ö, –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: \n\
{self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return self.answer

@BaseQuestion.register_task
class Task7(BaseQuestion):

    def __init__(self):
        predictions = pd.Series(uniform(0, 1, 7)).round(2)
        true_classes = pd.Series(randint(0, 2, 7))
        self.dataset = pd.DataFrame([predictions, true_classes],
                                    index=['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ –∫ –∫–ª–∞—Å—Å—É 1, p', '–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å, y'],
                                    columns=[0, 1, 2, 3, 4, 5, 6])
        self.dataset = self.dataset.rename(columns={0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: ''})

        precision, recall, thresholds = precision_recall_curve(true_classes, predictions, pos_label=1)
        index_threshold = np.where(precision[:-1].max())[0][0]

        self.answer = thresholds[index_threshold]

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–í—ã–±—Ä–∞—Ç—å –ø–æ—Ä–æ–≥ –æ—Ç–Ω–µ—Å–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∫ –∫–ª–∞—Å—Å—É 1 –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ (precision) \n\
–¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π. \n {self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return str(self.answer)

@BaseQuestion.register_task
class Task8(BaseQuestion):

    def __init__(self):
        predictions = pd.Series(uniform(0, 1, 7)).round(2)
        true_classes = pd.Series(randint(0, 2, 7)).round(0)
        self.dataset = pd.DataFrame([predictions, true_classes],
                                    index=['–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ –∫ –∫–ª–∞—Å—Å—É 1, p',
                                           '–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å, y'],
                                    columns=[0, 1, 2, 3, 4, 5, 6])
        self.dataset = self.dataset.rename(columns={0: '', 1: '', 2: '', 3: '', 4: '', 5: '', 6: ''})

        precision, recall, thresholds = precision_recall_curve(true_classes, predictions, pos_label=1)
        index_threshold = np.where(recall[:-1].max())[0][0]

        self.answer = thresholds[index_threshold]

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–í—ã–±—Ä–∞—Ç—å –ø–æ—Ä–æ–≥ –æ—Ç–Ω–µ—Å–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∫ –∫–ª–∞—Å—Å—É 1 –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏  –ø–æ–ª–Ω–æ—Ç—ã (recall) \n\
–¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π. \n {self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return str(self.answer)

@BaseQuestion.register_task
class Task9(BaseQuestion):

    def __init__(self):
        columns = ['x1', 'x2', 'x3']
        X_train = pd.DataFrame(data=randint(1, 10, (5, 3)), columns=columns)
        y_train = pd.Series(randint(0, 10, 5))
        self.dataset = pd.concat([X_train, y_train], axis=1)
        self.dataset = self.dataset.rename(columns={'x1': 'x1', 'x2': 'x2', 'x3': 'x3', 0: 'y'})

        reg = LinearRegression()
        reg.fit(X_train[['x1', 'x2', 'x3']], y_train)

        coefficients = reg.coef_
        self.answer = np.round(coefficients, 2).tolist()

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ù–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ø–æ —Å–ª–µ–¥—É—é—â–µ–π \n\
—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ. –û—Ç–≤–µ—Ç –∑–∞–ø–∏—à–∏—Ç–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. \n {self.dataset}'
        return text_of_task

    def get_answer(self):
        return list(map(str, self.answer))

@BaseQuestion.register_task
class Task10(BaseQuestion):

    def __init__(self):
        columns = ['x1', 'x2', 'x3']
        X_train = pd.DataFrame(data=randint(1, 10, (3, 3)), columns=columns)
        y_train = pd.Series(randint(1, 10, 3))
        self.dataset = pd.concat([X_train, y_train], axis=1)
        self.dataset = self.dataset.rename(columns={'x1': 'x1', 'x2': 'x2', 'x3': 'x3', 0: 'y'})

        zero_weights = np.zeros((4, 1))
        self.step = uniform(0.1, 1, 1).round(1)[0]
        self.answer = zero_weights - 2/3 * self.step * np.array([[sum(self.dataset.y)],
                                                            [sum(self.dataset.y * self.dataset.x1)],
                                                            [sum(self.dataset.y * self.dataset.x2)],
                                                            [sum(self.dataset.y * self.dataset.x3)]])
        self.answer = np.round(self.answer, 1)

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–î–ª—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –Ω–∞–π—Ç–∏ –≤–µ—Å–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞ –Ω–∞ \n\
–¥–∞–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –≤–µ—Å–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ —Ä–∞–≤–Ω—ã 0. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—à–∏–±–∫–∏ ‚Äì \n\
—Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞. –®–∞–≥ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞ –ø—Ä–∏–Ω—è—Ç—å —Ä–∞–≤–Ω—ã–º {self.step}. \n\
–û—Ç–≤–µ—Ç –∑–∞–ø–∏—à–∏—Ç–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª \n {self.dataset}'
        return text_of_task

    def get_answer(self):
        return list(map(str, self.answer[:, 0].tolist()))

@BaseQuestion.register_task
class Task11(BaseQuestion):

    def __init__(self):
        self.weights = uniform(0, 1, (1, 4)).round(1)
        self.features = np.concatenate([np.ones(1), randint(-20, 20, 3)])

        probabilistic_predictions = np.exp(np.dot(self.weights, self.features)) / (1 + np.exp(np.dot(self.weights, self.features)))
        self.answer = probabilistic_predictions[0].round(2)

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ù–∞–π—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å—É 1, –µ—Å–ª–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è \
–ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–µ–π —Å –≤–µ–∫—Ç–æ—Ä–æ–º –≤–µ—Å–æ–≤ \n [w0, w1, w2, w3] = {np.array2string(self.weights[0])}. \
–û–±—ä–µ–∫—Ç –∑–∞–¥–∞–Ω –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ [x1, x2, x3] = {np.array2string(self.features[1:])}.'
        return text_of_task

    def get_answer(self):
        return np.array2string(self.answer)[0]

from numpy.random import choice

@BaseQuestion.register_task
class Task12(BaseQuestion):

    def __init__(self):
        predictions = randint(-10, 30, 3)
        true_class = choice([-1, 1], size=3)
        self.dataset = pd.DataFrame([predictions, true_class],
                                    index=['–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏', '–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å, y'],
                                    columns=['0', '1', '2'])
        self.dataset = self.dataset.rename(columns={'0': '', '1': '', '2': ''})

        self.answer = np.log(np.exp(-self.dataset.iloc[-1, :] * self.dataset.iloc[0, :]) + 1).sum() / self.dataset.shape[1]
        self.answer = round(self.answer, 2)

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ü–æ—Å—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Ç–µ—Ä—å –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏. \n\
–û—Ç–≤–µ—Ç –∑–∞–ø–∏—à–∏—Ç–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π. \n\
{self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return str(self.answer)

from sklearn.tree import DecisionTreeClassifier

@BaseQuestion.register_task
class Task13(BaseQuestion):

    def __init__(self):
        X_train = pd.Series(list(range(1, 13)))
        y_train = pd.Series(randint(0, 2, 12))
        self.dataset = pd.DataFrame([X_train, y_train],
                                    index=['x', 'y'],
                                    columns=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
        self.dataset = self.dataset.rename(columns={0: '', 1: '', 2: '', 3: '', 4: '', 5: '',
                                            6: '', 7: '', 8: '', 9: '', 10: '', 11: ''})

        clf = DecisionTreeClassifier(criterion='entropy')
        clf.fit(X_train.values.reshape(-1, 1), y_train)
        self.answer = clf.get_depth()

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ö–∞–∫–æ–≤–∞ –±—É–¥–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–≤–æ–∏—á–Ω–æ–≥–æ —Ä–µ—à–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ \
–ø–æ —ç–Ω—Ç—Ä–æ–ø–∏–π–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –æ—à–∏–±–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö. \n {self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return str(self.answer)

@BaseQuestion.register_task
class Task14(BaseQuestion):

    def __init__(self):
        X_train = pd.Series(list(range(1, 13)))
        y_train = pd.Series(randint(0, 2, 12))
        self.dataset = pd.DataFrame([X_train, y_train], index=['x', 'y'], columns=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
        self.dataset = self.dataset.rename(columns={0: '', 1: '', 2: '', 3: '', 4: '', 5: '',
                                                    6: '', 7: '', 8: '', 9: '', 10: '', 11: ''})

        self.min_samples_leaf = randint(1, 4)

        clf = DecisionTreeClassifier(criterion='entropy', min_samples_leaf=self.min_samples_leaf)
        clf.fit(X_train.values.reshape(-1, 1), y_train)
        self.answer = round(clf.score(X_train.values.reshape(-1, 1), y_train), 2)

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–≤–æ–∏—á–Ω–æ–µ —Ä–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ –ø–æ —ç–Ω—Ç—Ä–æ–ø–∏–π–Ω–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –æ—à–∏–±–∫–∏ —Å \n\
–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ª–∏—Å—Ç–µ —Ä–∞–≤–Ω–æ–º {self.min_samples_leaf}, –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö. \n\
–ö–∞–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±—É–¥–µ—Ç —É —ç—Ç–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ? –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ —Å–æ—Ç—ã—Ö.\n\
{self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return str(self.answer)

@BaseQuestion.register_task
class Task15(BaseQuestion):

    def __init__(self):
        X_train = pd.Series(randint(0, 20, 12))
        y_train = pd.Series(randint(0, 10, 12))
        X_test = pd.Series(randint(0, 25))
        self.dataset = pd.DataFrame([X_train.append(X_test, ignore_index=True), y_train],
                                    index=['x', 'y'],
                                    columns=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]).fillna('')
        self.dataset = self.dataset.rename(columns={0: '', 1: '', 2: '', 3: '', 4: '', 5: '',
                                                    6: '', 7: '', 8: '', 9: '', 10: '', 11: '', 12: ''})

        self.depth = randint(2, 4)

        reg = DecisionTreeRegressor(max_depth=self.depth)
        reg.fit(X_train.values.reshape(-1, 1), y_train)
        self.answer = round(reg.predict(X_test.values.reshape(-1, 1))[0], 0)

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ—à–∞—é—â–µ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è –∑–∞–¥–∞—á–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –¥–æ –≥–ª—É–±–∏–Ω—ã {self.depth} –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É \n\
–Ω–∞–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏—é –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞. \n {self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return np.array2string(self.answer)[0]

@BaseQuestion.register_task
class Task16(BaseQuestion):

    def __init__(self):
        X_train = pd.Series(list(range(1, 13)), index=list(range(1, 13)))
        y_train = pd.Series(randint(0, 2, 12), index=list(range(1, 13)))
        self.X_test = pd.Series(np.round(uniform(1, 10), 2))

        self.dataset = pd.DataFrame([X_train, y_train], index=['x', 'y'], columns=list(range(1, 13)))

        self.datasubset_1 = self.dataset[X_train.sample(n=6, replace=False).values]
        self.datasubset_2 = self.dataset[X_train.sample(n=6, replace=False).values]
        self.datasubset_3 = self.dataset[X_train.sample(n=6, replace=False).values]

        clf = DecisionTreeClassifier()
        answer1 = clf.fit(self.datasubset_1.iloc[0, :].values.reshape(-1, 1),
                          self.datasubset_1.iloc[1, :].values.reshape(-1, 1)).predict(self.X_test.values.reshape(-1, 1))
        answer2 = clf.fit(self.datasubset_2.iloc[0, :].values.reshape(-1, 1),
                          self.datasubset_2.iloc[1, :].values.reshape(-1, 1)).predict(self.X_test.values.reshape(-1, 1))
        answer3 = clf.fit(self.datasubset_3.iloc[0, :].values.reshape(-1, 1),
                          self.datasubset_3.iloc[1, :].values.reshape(-1, 1)).predict(self.X_test.values.reshape(-1, 1))
        self.answer = round(np.array([answer1, answer2, answer3]).mean(), 0).astype(int)

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ x = {str(self.X_test[0])} –ø—É—Ç–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞, —Å–æ—Å—Ç–æ—è—â–µ–≥–æ –∏–∑ \n\
—Ç—Ä–µ—Ö —Ä–µ—à–∞—é—â–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ –ø–æ–¥–≤—ã–±–æ—Ä–∫–∞–º: \n\
x1 = {self.datasubset_1.iloc[0, :].tolist()}, \n\
—Ö2 = {self.datasubset_2.iloc[0, :].tolist()} \n\
x3 = {self.datasubset_3.iloc[0, :].tolist()} \n–¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: \n\
{self.dataset.rename(columns={1: "", 2: "", 3: "", 4: "", 5: "", 6: "", 7: "", 8: "", 9: "", 10: "", 11: "", 12: ""}).to_string()}'
        return text_of_task

    def get_answer(self):
        return str(self.answer)

@BaseQuestion.register_task
class Task17(BaseQuestion):

    def __init__(self):
        self.subdatasets = pd.DataFrame(np.round(uniform(8, 10, (3, 4)), 2),
                                        columns=['', '', '', ''],
                                        index=['–ü–æ–¥–≤—ã–±–æ—Ä–∫–∞_1', '–ü–æ–¥–≤—ã–±–æ—Ä–∫–∞_2', '–ü–æ–¥–≤—ã–±–æ—Ä–∫–∞_3'])
        self.answer_mean = self.subdatasets.mean(axis=1).mean()
        self.answer_variance = self.subdatasets.mean(axis=1).var() * self.subdatasets.shape[1]

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ò–∑ –±–æ–ª—å—à–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (–≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏) –≤–∑—è–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–≤—ã–±–æ—Ä–æ–∫. \n\
–í –∫–∞–∂–¥—É—é –∏–∑ –ø–æ–¥–≤—ã–±–æ—Ä–æ–∫ –ø–æ–ø–∞–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –Ω–∞–±–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤. \n\
–û—Ü–µ–Ω–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∏ –¥–∏—Å–ø–µ—Ä—Å–∏—é —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–π —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞–±–æ—Ä–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤. \n\
–û—Ç–≤–µ—Ç –∑–∞–ø–∏—à–∏—Ç–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: 5.5 3.8. \n\
{self.subdatasets.to_string()}'
        return text_of_task

    def get_answer(self):
        return str(round(self.answer_mean, 2)), str(round(self.answer_variance, 2))

@BaseQuestion.register_task
class Task18(BaseQuestion):

    def __init__(self):
        self.dataset = pd.DataFrame(np.round(uniform(8, 10, (3, 4)), 2),
                                    columns=['', '', '', ''])
        self.true_value = round(uniform(8, 10), 2)
        mean = self.dataset.values.mean()
        self.answer_variance = round(self.dataset.values.var(), 2)
        self.answer_bias = round(abs(mean - self.true_value), 2)

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–†–µ–≥—Ä–µ—Å—Å–æ—Ä –ø–æ—Å—Ç—Ä–æ–∏–ª —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –ü—É—Å—Ç—å –∏—Å—Ç–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–∫–æ–º–æ–π \n\
–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–≤–Ω–æ {self.true_value}. –ù–∞–π—Ç–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: bias –∏ variance. \n\
–û—Ç–≤–µ—Ç –∑–∞–ø–∏—à–∏—Ç–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: 5.5 3.8. \n\
{self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return str(self.answer_bias), str(self.answer_variance)

@BaseQuestion.register_task
class Task19(BaseQuestion):

    def __init__(self):
        self.target_value = pd.DataFrame([randint(4, 10, 5)], columns=['', '', '', '', ''], index=['y'])
        self.start_value = randint(1, 6)
        mean_shift = (self.target_value - self.start_value).mean(axis=1)

        self.answer = self.start_value + mean_shift

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–†–µ—à–∞–µ–º –∑–∞–¥–∞—á—É —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ b(x) = w. \n\
–£ —ç—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Äì –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã w. –ù–∞—á–∞–ª—å–Ω–æ–µ \n\
–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ w = {self.start_value}. –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏—Ç–µ—Ä–∞—Ü–∏—é –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –±—É—Å—Ç–∏–Ω–≥–∞ –Ω–∞–¥ —ç—Ç–∏–º \n\
–∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –∏ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ w, –µ—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è: \n\
{self.target_value.to_string()}'
        return text_of_task

    def get_answer(self):
        return str(self.answer[0])

@BaseQuestion.register_task
class Task20(BaseQuestion):

    def __init__(self):
        self.dataset = pd.DataFrame([np.round(uniform(-1, 1, 3), 1),
                                np.round(uniform(-1, 1, 3), 1),
                                randint(1, 6, 2)],
                                columns=['1', '2', '3'],
                                index=['w1', 'w2', 'x']).fillna('')
        y_s = 1 / (1 + np.exp(np.float64(np.array(self.dataset.iloc[-1, :-1].sum() * -self.dataset.iloc[0]))))
        self.answer = 1 / (1 + np.exp(-sum(y_s * self.dataset.iloc[1, :])))

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–≤—É—Ö—Å–ª–æ–π–Ω–æ–π –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø—Ä—è–º–æ–≥–æ \n\
—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ¬´—Å–∏–≥–º–æ–∏–¥¬ª –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤.\n\
–û—Ç–≤–µ—Ç –∑–∞–ø–∏—à–∏—Ç–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π \n\
{self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return str(round(self.answer, 2))

@BaseQuestion.register_task
class Task21(BaseQuestion):

    def __init__(self):
        arr = randint(0, 256, (9, 9))
        self.image = pd.DataFrame(arr,
                                  columns=['', '', '', '', '', '', '', '', ''],
                                  index=['', '', '', '', '', '', '', '', ''])
        arr = arr.reshape(1, 9, 9, 1)
        max_pool = MaxPooling2D(pool_size=3, strides=2)
        model = Sequential([max_pool])
        pooled_image = pd.DataFrame(model.predict(arr).reshape(4, 4))
        self.answer = np.diag(pooled_image).sum()

    def get_task(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
        :return: str
        """
        text_of_task = f'–ü—Ä–æ–≤–µ—Å—Ç–∏ —Å–≤–µ—Ä—Ç–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–∫—Å–ø—É–ª–ª–∏–Ω–≥–æ–º —Å–µ—Ç–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞ 3—Ö3 –ø–∏–∫—Å–µ–ª—è —Å —à–∞–≥–æ–º 2. \n\
–í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –ø–æ–ª—É—á–∏–≤—à–µ–≥–æ—Å—è –º–∞—Å—Å–∏–≤–∞. \n\
{self.image.to_string()}'
        return text_of_task

    def get_answer(self):
        return str(self.answer)

@BaseQuestion.register_task
class Task22(BaseQuestion):

    def __init__(self):
        self.dataset = pd.DataFrame(randint(1, 10, (5, 3)), columns=['x1', 'x2', 'x3'])
        self.dataset['y'] = randint(0, 2, 5)

        clf = MLPClassifier(hidden_layer_sizes=1, activation='relu')
        clf.fit(self.dataset[['x1', 'x2', 'x3']], self.dataset.y)
        self.answer = list(map(str, np.round(np.concatenate((clf.coefs_[0], clf.coefs_[1])).reshape(1, 4)[0], 2).tolist()))

    def get_task(self):
        text_of_task = f'–ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –ø–µ—Ä—Ü–µ–ø—Ç—Ä–æ–Ω–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö. \n\
–§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ‚Äì ReLu. –û—Ç–≤–µ—Ç—ã –∑–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.\n\
{self.dataset.to_string()}'
        return text_of_task

    def get_answer(self):
        return self.answer